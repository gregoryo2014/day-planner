#!/usr/bin/perl -w
#
# Script to create a dayplanner text file
# FIXME: a previous dayplanner file must exist
#
############################################################
# Script overview, pseudocode
############################################################
#
# DIR=current working dir (cwd)
# If file 'DIR\datestamp.txt' exists, exit
# else (If file doesn't exist)
#   create 'DIR\datestamp.txt'
#   Echo into file until EOF:
#   Day date month, year
#
#   EOF
#   loop until found most recent previous-day-datestamp.txt
#     append recurring tasks and day-of-week tasks
#     append last n-2 lines of previous-day-datestamp.txt
#   end loop
# end if
# open DIR\datestamp.txt in gvim
#
############################################################

my $discard;
($discard,$discard,$discard,$mday,$mon,$year,$wday,$discard,$discard) = localtime();
my $today_stamp = $year + 1900 . sprintf( "%02d", $mon + 1 ) . sprintf( "%02d", $mday );
my $today_file = "$today_stamp.txt";
my ( $today_opened, @day_abbr, @mon_abbr, $wday_string, $mon_string, $year_string );
my ( $previous_stamp, $previous_file, $previous_opened, $input, $output, $recur_opened );
my ( $wday_tasks_file, $wday_opened );
my $recurTasks_file = "recurring-tasks.txt";

# Which OS? http://www.perlmeme.org/faqs/system/check_os.html
my $os = $^O;
my $vim_bin;

# Change dir and choose the vim binary
########################################
chdir( "/home/ora006/ownCloud/day-planner" );
$vim_bin = "/usr/bin/gvim";

# Create and populate today's file
########################################
# If today's file already exists, leave it alone
unless( -e $today_file ) {
  # otherwise, create and open it for writing
  $today_opened = open( TODAY, ">>$today_file" );
  if( ! $today_opened ) {
    print "Today's file failed to open\n";
    exit 1;
  }

  # Store today's date
  @day_abbr = qw( Sunday Monday Tuesday Wednesday Thursday Friday );
  @mon_abbr = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
  $wday_string = $day_abbr[$wday];
  $mon_string = $mon_abbr[$mon];
  $year_string = $year + 1900;
  print TODAY "$wday_string $mday $mon_string, $year_string\n\n";

  # Step backwards incrementally, finding the most recent file
  # Sure it checks for non-existent dates, but it's fast and it works
  $previous_stamp = $today_stamp - 1;
  do {
    $previous_file = $previous_stamp-- . ".txt";
    $previous_opened = open( PREVIOUS, "<$previous_file" );
  } until $previous_opened;

  # Skip all lines in the previous file until the headings
  $input = "";
  while(( $input !~ /STATE\tPRI\tLIST/i ) && ( $input = <PREVIOUS> )) {}
  print TODAY $input;

  # Add recurring tasks from file, if it exists
  if( -e $recurTasks_file ) {
    $recur_opened = open( RECUR, "<$recurTasks_file" );
    if( ! $recur_opened ) {
      print "Recurring tasks file failed to open\n";
      exit 1;
    }
    while( $input = <RECUR> ) {
      print TODAY $input;
    }
  }

  # Add recurring day-of-week tasks from file, if it exists
  $wday_tasks_file = "$wday_string.txt";
  if( -e $wday_tasks_file ) {
    $wday_opened = open( WDAY, "<$wday_tasks_file" );
    if( ! $wday_opened ) {
      print "Recurring day-of-week tasks file failed to open\n";
      exit 1;
    }
    while( $input = <WDAY> ) {
      print TODAY $input;
    }
  }

  # process the rest of the previous file
  while( $input = <PREVIOUS> ) {
    # transfer all tasks except:
    #   finished (done)
    #   delegated (>)
    #   deleted (x)
    #   sent to JIRA (j)
    unless( $input =~ /^[^\t]*(done|>|x|j)/i ) {
      # strip any state info, but include blank lines
      $output = $input;
      $output =~ (s/^[^\t\n]*//);
      print TODAY $output;
    }
  }
}

# Open today's file
########################################
if( -e $vim_bin ) {
  # open today_file in gvim with cursorcolumn disabled
  @vim_args = ("-c set cuc&", $today_file);
  system( $vim_bin, @vim_args );
  exit 0;
}

else {
  print "Error, can't find an editor to open $today_file\n";
}
